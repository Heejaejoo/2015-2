#lang racket
(require "hw1-4.rkt")
(provide zero one not-c and-c or-c)
(provide is-zero? is-one? is-not? is-and? is-or? sub-circuit)

(define zero
  (leaf 0))
(define one
  (leaf 1))
(define (not-c c)
  (list 'not c))
(define (and-c c1 c2)
  (list 'and c1 c2))
(define (or-c c1 c2)
  (list 'or c1 c2))

(define (is-zero? c)
  (equal? (car c) 0))
(define (is-one? c)
  (equal? (car c) 1))
(define (is-not? c)
  (equal? (car c) 'not))
(define (is-and? c)
  (equal? (car c) 'and))
(define (is-or? c)
  (equal? (car c) 'or))

(define (sub-circuit c n)
  (nth-child c (+ n 1)))

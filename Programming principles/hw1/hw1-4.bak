#lang racket
(provide leaf node)
(provide is-empty-tree? is-leaf? leaf-val nth-child)

(define (leaf n)
  (cons n '()))

(define (node l)
 l)

(define (is-empty-tree? t)
  (if (equal? t '()) #t #f))

(define (is-leaf? t)
  (if (null? (cdr t)) #t #f))

(define (leaf-val t)
  (if (null? t) null (car t)))

(define (nth-child t n)
  (if (= n 0) (car t)
      (nth-child (cdr t) (- n 1))
      ))
